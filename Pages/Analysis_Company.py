# Importando as bibliotecas necess√°rias
import streamlit as st
import yfinance as yf
import datetime as dt

# Definindo o t√≠tulo e o √≠cone do aplicativo
st.set_page_config(
    page_title='An√°lise de Ticker Financeiro',
    page_icon=':chart_with_upwards_trend:',
)


#Iniciando a vari√°vel
tickerChosen = None

# Fun√ß√£o para obter dados hist√≥ricos de um ticker
@st.cache_data
def get_ticker_data(ticker):
    ticker_obj = yf.Ticker(ticker)  # Criando o objeto Ticker
    stock_data = ticker_obj.history(period="max", interval="1d")  # Obtendo dados hist√≥ricos
    return stock_data[['Close']]  # Retorna apenas a coluna de fechamento

# Exibindo o t√≠tulo da p√°gina
'''
# :chart_with_upwards_trend: An√°lise de Ticker Financeiro

Explore o desempenho do ticker no mercado financeiro.
'''

# C√°lculo do RSI
def calculate_rsi(data, window=14):
    delta = data.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# C√°lculo do MACD
def calculate_macd(data, short_window=12, long_window=26, signal_window=9):
    short_ema = data.ewm(span=short_window, adjust=False).mean()
    long_ema = data.ewm(span=long_window, adjust=False).mean()
    macd = short_ema - long_ema
    signal = macd.ewm(span=signal_window, adjust=False).mean()
    return macd, signal

# Definindo o ticker para an√°lise
def is_valid_ticker(ticker):
    """Verifica se o ticker existe no Yahoo Finance."""
    if not ticker or ticker is None or ticker == {}:
        return False
    try:
        stock = yf.Ticker(ticker)
        info = stock.info
        return 'longName' in info  # Se tiver nome da empresa, √© v√°lido
    except Exception:
        return False

# Entrada do usu√°rio
ticker = st.text_input('Digite o Ticker:', 'AAPL')

# Valida√ß√£o do ticker
if ticker:
    if is_valid_ticker(ticker):
        # Rodando a fun√ß√£o para pegar os dados do ticker
        tickerChosen = yf.Ticker(ticker)
        ticker_data = get_ticker_data(ticker)
    else:
        st.error(f"O ticker '{ticker}' n√£o √© v√°lido. Tente outro.")
else:
    st.warning("Por favor, digite um ticker antes de continuar.")

# Adicionando espa√ßo
''

# Colunas de informa√ß√µes est√°ticas sobre a a√ß√£o
if tickerChosen:
    # Colunas de informa√ß√µes est√°ticas sobre a a√ß√£o
    col1, col2, col3 = st.columns([1, 1, 1])
    with col1:
        if tickerChosen.info and 'longName' in tickerChosen.info:
            st.write(f"Empresa: {tickerChosen.info['longName']}")
        else:
            st.write("Empresa: Informa√ß√£o indispon√≠vel")

    with col2:
        if tickerChosen.info and 'industry' in tickerChosen.info:
            st.write(f"Mercado: {tickerChosen.info['industry']}")
        else:
            st.write("Mercado: Informa√ß√£o indispon√≠vel")

    with col3:
        if tickerChosen.info and 'currentPrice' in tickerChosen.info:
            st.write(f"Pre√ßo atual: {tickerChosen.info['currentPrice']} USD")
        else:
            st.write("Pre√ßo atual: Informa√ß√£o indispon√≠vel")
#Validando o Ticker
if tickerChosen:
    # Informa√ß√µes sobre a empresa
    summary =  tickerChosen.info['longBusinessSummary']
    st.markdown(
        f"""
        <div style="overflow-y: scroll; height: 200px; background-color: rgba(50, 50, 50, 0.9); border-radius: 5px; padding: 10px;">
            <pre>{summary}</pre>
        </div>
        """,
        unsafe_allow_html=True
    )
    ''
    ''



    # Exibindo m√©tricas do ticker
    st.header(f'M√©tricas do Ticker {ticker}', divider='gray')

    tabs = st.tabs(["Evolu√ß√£o de pre√ßos", "Dividendos e Descobramentos", "Informa√ß√µes Gerais", "Indicadores T√©cnicos", "FAQ"])

    # Tab 1
    with tabs[0]:
        # Convertendo pandas Timestamps para objetos datetime do Python
        min_date = ticker_data.index.min().to_pydatetime()
        max_date = ticker_data.index.max().to_pydatetime()
        # Permitindo que o usu√°rio selecione um intervalo de tempo
        st.subheader('Gr√°fico de evolu√ß√£o')
        from_date, to_date = st.slider(
        'üìàEvolu√ß√£o da a√ß√£o ao longo dos anos',
        min_value=min_date,
        max_value=max_date,
        value=[min_date, max_date],
        format="YYYY-MM-DD"
        )
        # Filtrando os dados de acordo com a sele√ß√£o de datas
        filtered_ticker_data = ticker_data[
            (ticker_data.index <= to_date)
            & (from_date <= ticker_data.index)
        ]
        # Evolu√ß√£o de pre√ßos
        st.line_chart(
            filtered_ticker_data,
        )
        # Outra visualiza√ß√£o
        st.subheader('Analise de evolu√ß√£o escolhendo o incio')
        startDat = st.text_input('Data de inicio', '2025-01-01')
        endDat = dt.date.today()
        newTime = tickerChosen.history(start = startDat, end = endDat)
        st.dataframe(newTime)
        st.download_button('Download CSV', newTime.to_csv(), file_name='evolu√ß√£o.csv')


    # Tab 2
    with tabs[1]:
        # Dividendos Pagos anualmente
        col1, col2= st.columns([1,1])
        with col1:
            try: 
                dividendYeld = tickerChosen.info['dividendYield']
            except:
                dividendYeld = None
            if dividendYeld:
                st.write(f"üí∞ Dividend Yield: {dividendYeld}")
            else:
                st.write(f"üí∞ Dividend Yield: N√£o informado")
        with col2:
            try: 
                dividendRate = tickerChosen.info['dividendRate']
            except:
                dividendRate = None
            if dividendRate:
                st.write(f"üí∞ Dividend Rate: {dividendRate}")
            else:
                st.write(f"üí∞ Dividend Rate: N√£o informado")
        st.subheader('üí∞ Dividendos Pagos anualmente')
        dividendsYearly = tickerChosen.dividends.resample('Y').sum()
        st.bar_chart(dividendsYearly)
        st.subheader('üîÄDesdobramento das a√ß√µes')
        st.dataframe(tickerChosen.splits)

    # Tab 3
    with tabs[2]:
        # Exbir informa√ß√µes cont√°beis
        st.subheader('üìú Informa√ß√µes Cont√°beis')
        st.dataframe(tickerChosen.financials )
        st.download_button('Download CSV Cont√°bil', tickerChosen.financials.to_csv(), file_name='financeiro.csv')
        st.subheader('üíµ Informa√ß√µes de Caixa')
        st.dataframe(tickerChosen.cashflow)
        st.download_button('Download CSV Caixa', tickerChosen.cash_flow.to_csv(), file_name='caixa.csv')

    #Tab 4
    with tabs[3]:
        #definindo um hist√≥rico de tempo menor para visualiza√ß√£o otimizada
        smallData = tickerChosen.history(period="3y", interval="1d")
        # informa√ß√µes t√©cnicas
        smallData['SMA_50'] = smallData['Close'].rolling(window=50).mean()
        smallData['SMA_200'] = smallData['Close'].rolling(window=200).mean()
        smallData['EMA_50'] = smallData['Close'].ewm(span=50, adjust=False).mean()
        # Adicionando os c√°lculos ao dataframe
        smallData['RSI'] = calculate_rsi(smallData['Close'])
        smallData['MACD'], smallData['Signal'] = calculate_macd(smallData['Close'])

        # Gr√°fico com M√©dias M√≥veis
        col1, col2, col3= st.columns([1,1,1])
        ''
        ''
        with col1:
            st.write(f"üìà **P/E Ratio:** {tickerChosen.info.get('trailingPE', 'N/A')}")
        with col2:
            st.write(f"üìä **P/B Ratio:** {tickerChosen.info.get('priceToBook', 'N/A')}")
        with col3:
            st.write(f"üè¶ **ROE:** {tickerChosen.info.get('returnOnEquity', 'N/A')}")
        st.subheader('Evolu√ß√£o da A√ß√£o com M√©dias M√≥veis')
        st.line_chart(smallData[['Close', 'SMA_50', 'SMA_200']])
        st.subheader('üìä RSI - √çndice de For√ßa Relativa')
        st.line_chart(smallData[['RSI']])
        st.subheader('üìà MACD - Moving Average Convergence Divergence')
        st.line_chart(smallData[['MACD', 'Signal']])
        st.subheader('M√∫ltiplos Financeiros')
    #Tab 5
    with tabs[4]:
        st.header("üìñ FAQ Financeiro - Termos Explicados")
        with st.expander("üìà O que √© o P/E Ratio? (Pre√ßo sobre Lucro)"):
            st.write(
            "O P/E Ratio (Price-to-Earnings Ratio) √© um indicador que mostra "
            "quanto os investidores est√£o dispostos a pagar por cada d√≥lar de lucro da empresa. "
            "Ele √© calculado dividindo o pre√ßo da a√ß√£o pelo lucro por a√ß√£o (EPS)."
        )
        with st.expander("üìä O que significa o P/B Ratio? (Pre√ßo sobre Valor Patrimonial)"):
            st.write(
            "O P/B Ratio (Price-to-Book Ratio) compara o pre√ßo da a√ß√£o com seu valor patrimonial por a√ß√£o. "
            "Se for maior que 1, significa que o mercado valoriza a empresa acima do seu patrim√¥nio l√≠quido."
        )
        with st.expander("üè¶ O que √© o ROE? (Retorno sobre o Patrim√¥nio)"):
            st.write(
            "O ROE (Return on Equity) mede a rentabilidade de uma empresa em rela√ß√£o ao seu patrim√¥nio l√≠quido. "
            "Ele indica o qu√£o eficiente a empresa √© em gerar lucro com seus pr√≥prios recursos."
        )

        with st.expander("üí∞ O que √© Dividend Yield?"):
            st.write(
            "O Dividend Yield mostra o retorno em dividendos que um investidor recebe sobre o pre√ßo atual da a√ß√£o. "
            "√â calculado dividindo o dividendo anual pago pela empresa pelo pre√ßo da a√ß√£o."
        )

        with st.expander("üìâ O que √© MACD? (Moving Average Convergence Divergence)"):
            st.write(
            "O MACD √© um indicador t√©cnico que ajuda a identificar mudan√ßas na tend√™ncia do pre√ßo de um ativo. "
            "Ele compara duas m√©dias m√≥veis (geralmente de 12 e 26 per√≠odos) e gera um sinal de compra ou venda."
        )

        with st.expander("üìä O que √© RSI? (√çndice de For√ßa Relativa)"):
            st.write(
            "O RSI (Relative Strength Index) mede a velocidade e a mudan√ßa dos movimentos de pre√ßo. "
            "Ele varia entre 0 e 100, sendo que valores acima de 70 indicam sobrecompra e abaixo de 30 indicam sobrevenda."
        )
        with st.expander("üìä O que √© a Evolu√ß√£o da A√ß√£o com M√©dias M√≥veis?"):
            st.write(
            "A evolu√ß√£o da a√ß√£o com m√©dias m√≥veis exibe o pre√ßo de fechamento do ativo ao longo do tempo, "
            "juntamente com duas m√©dias m√≥veis: SMA (Simples) e EMA (Exponencial). "
            "Essas m√©dias ajudam a identificar tend√™ncias e poss√≠veis pontos de compra e venda."
        )

        with st.expander("üìú O que s√£o informa√ß√µes cont√°beis?"):
            st.write(
            "As informa√ß√µes cont√°beis exibem os demonstrativos financeiros da empresa, como "
            "Receita, Lucro Bruto, EBITDA e outras m√©tricas cont√°beis importantes. "
            "√â √∫til para analisar a sa√∫de financeira da empresa ao longo do tempo."
        )

        with st.expander("üíµ O que s√£o as informa√ß√µes de Caixa?"):
            st.write(
            "As informa√ß√µes de caixa mostram o fluxo de caixa da empresa, incluindo as entradas e sa√≠das de dinheiro de diferentes fontes. "
            "Essa informa√ß√£o √© essencial para entender se a empresa est√° gerando dinheiro suficiente para cobrir suas despesas."
        )

        with st.expander("üîÄ O que significa Desdobramento das A√ß√µes?"):
            st.write(
            "O desdobramento de a√ß√µes (stock split) ocorre quando uma empresa divide suas a√ß√µes existentes "
            "em m√∫ltiplas a√ß√µes novas, reduzindo o pre√ßo por a√ß√£o sem alterar o valor total investido. "
            "Isso pode aumentar a liquidez do papel e torn√°-lo mais acess√≠vel para investidores."
        )
